ROM0 bank #0:
  SECTION: $0000-$0006 ($0007 bytes) ["WaitHBlank"]
           $0000 = waitHBlank.wait
           $0000 = waitHBlank
  SECTION: $0007-$0028 ($0022 bytes) ["Init"]
           $0007 = Start
           $0025 = Start.halt
  SECTION: $0038-$003a ($0003 bytes) ["hard crash"]
           $0038 = Error2
  SECTION: $0040-$0043 ($0004 bytes) ["Vblank Vector"]
  SECTION: $0048-$004a ($0003 bytes) ["LYC Interrupt"]
  SECTION: $004b-$006b ($0021 bytes) ["Blue Gem"]
           $004b = Object_Start_BlueGem
           $004e = Object_Update_BlueGem
           $0051 = Object_Draw_BlueGem
           $0067 = Object_PlyColl_BlueGem
  SECTION: $0080-$00bf ($0040 bytes) ["Tileset Solidness"]
           $0080 = tileset_solidness
  SECTION: $00c0-$00f5 ($0036 bytes) ["Sprite orders"]
           $00c0 = SpriteOrders_Player
           $00c0 = SprPlayer_0
           $00c4 = SprPlayer_45
           $00c8 = SprPlayer_90
           $00cc = SprPlayer_135
           $00d0 = SprPlayer_180
           $00d4 = SprPlayer_225
           $00d8 = SprPlayer_270
           $00dc = SprPlayer_315
           $00e0 = SprBlueGem
           $00e4 = SprBullet
           $00e6 = SprGreenGem
           $00ea = SprPurpleGem
           $00ee = SprRedGem
           $00f2 = SprYellowGem
  SECTION: $0100-$014f ($0050 bytes) ["Jumpstart Code"]
           $0100 = Jumpstart
  SECTION: $0150-$01da ($008b bytes) ["Common Gem Code"]
           $0150 = Object_Start_GemCommon
           $0170 = Object_Start_GemCommon.loop
           $0175 = Object_Update_GemCommon
           $018a = Object_Update_GemCommon.unloadGem
           $0199 = Obj_PlyColl_GemCommon
           $01da = Obj_PlyColl_GemCommon.noCollision
  SECTION: $01db-$01fb ($0021 bytes) ["Green Gem"]
           $01db = Object_Start_GreenGem
           $01de = Object_Update_GreenGem
           $01e1 = Object_Draw_GreenGem
           $01f7 = Object_PlyColl_GreenGem
  SECTION: $0200-$02ff ($0100 bytes) ["LUTs"]
           $0200 = Mul4LUT
  SECTION: $0300-$030d ($000e bytes) ["Start Routine Pointers"]
           $0300 = Object_StartRoutinePointers
  SECTION: $030e-$03f8 ($00eb bytes) ["Object Manager"]
           $030e = Object_SpawnObject
           $0311 = Object_SpawnObject.findSlotloop
           $031a = Object_SpawnObject.yesDoThisOne
           $0330 = Object_Update
           $0333 = Object_Update.objectUpdateLoop
           $0346 = Object_Update.continue
           $034c = Object_CheckOnScreen
           $036e = Object_CheckOnScreen.otherwise
           $038d = Object_CheckOnScreen.onScreen
           $0394 = Object_CheckOnScreen.offScreen
           $039b = Object_DestroyCurrent
           $03a3 = Object_CleanTypeArray
           $03a6 = Object_CleanTypeArray.loop
           $03af = Object_CleanTypeArray.writeZero
           $03b1 = Object_CleanTypeArray.notWriteZero
           $03b6 = Object_PlyColl_None
           $03b6 = Object_Update_None
           $03b6 = Object_Start_None
           $03b6 = Object_Draw_None
           $03b8 = PrepareSpriteDraw
  SECTION: $0400-$040d ($000e bytes) ["Update Routine Pointers"]
           $0400 = Object_UpdateRoutinePointers
  SECTION: $040e-$04e4 ($00d7 bytes) ["User Interface"]
           $040e = UpdateHUD
           $0434 = UpdateHUD.tile1
           $043e = UpdateHUD.notEmpty1
           $0449 = UpdateHUD.notHalf1
           $044c = UpdateHUD.tile2
           $0456 = UpdateHUD.notEmpty2
           $0460 = UpdateHUD.notHalf2
           $0463 = UpdateHUD.tile3
           $046a = UpdateHUD.notEmpty3
           $0471 = UpdateHUD.notHalf3
           $0475 = ClearWindowLayer
           $047a = ClearWindowLayer.loop1
           $048d = ClearWindowLayer.loop2
           $0496 = InitWindowLayer
           $049f = InitWindowLayer.loopHor1
           $04af = InitWindowLayer.loopTextRow1
           $04c4 = InitWindowLayer.loopTextRow2
           $04d4 = InitWindowLayer.loopHor2
  SECTION: $04e5-$04ff ($001b bytes) ["Vblank Handler"]
           $04e5 = Vblank
  SECTION: $0500-$050d ($000e bytes) ["Player Collision Routine Pointers"]
           $0500 = Object_PlyCollRoutinePointers
  SECTION: $050e-$05e2 ($00d5 bytes) ["Title Screen Loop"]
           $050e = StateStart_GameLoop
           $0532 = StateStart_GameLoop.noGBC
           $0575 = StateStart_GameLoop.clear_loop
           $05ab = StateStart_GameLoop.loop
           $05c5 = StateUpdate_GameLoop
           $05d9 = StateUpdate_GameLoop.checkLoop
  SECTION: $05e3-$05f7 ($0015 bytes) ["OAM DMA routine"]
           $05e3 = CopyDMARoutine
           $05e9 = CopyDMARoutine.copy
           $05f0 = DMARoutine
           $05f4 = DMARoutine.wait
           $05f8 = DMARoutineEnd
  SECTION: $0600-$060d ($000e bytes) ["Draw Routine Pointers"]
           $0600 = Object_DrawRoutinePointers
  SECTION: $060e-$06c4 ($00b7 bytes) ["Text Data"]
           $060e = Text_Title_PressStart
           $061b = Text_Debug_Warning
           $06a0 = Text_Debug_Error
  SECTION: $06c5-$06fa ($0036 bytes) ["Sprite Handler"]
           $06c5 = HandleSprites
           $06d5 = FillShadowOAM
           $06dd = FillShadowOAM.fillLoop
           $06f5 = FillShadowOAM.endLoop
           $06f6 = FillShadowOAM.zeroTheRestLoop
  SECTION: $0700-$070a ($000b bytes) ["StateUpdate"]
           $0700 = States
           $070a = StateUpdate_None
           $070a = StateStart_None
  SECTION: $070b-$09ba ($02b0 bytes) ["Player Handler"]
           $070b = Player_HandleInput
           $0715 = Player_HandleInput.endIf
           $072d = Player_HandleInput.countTimer
           $0731 = Player_HandleInput.afterBullet
           $0748 = Player_HandleInput.handleRight
           $0751 = Player_HandleInput.noInc1
           $0759 = Player_HandleInput.noDec1
           $075b = Player_HandleInput.handleLeft
           $0764 = Player_HandleInput.noInc2
           $076b = Player_HandleInput.noDec2
           $076d = Player_HandleInput.handleUp
           $0771 = Player_HandleInput.handleDown
           $0775 = Player_HandleInput.afterPlayerInput
           $077c = Player_HandleInput.handleMovement
           $0789 = Charge
           $07a5 = Charge.right
           $07b2 = Charge.upright
           $07c2 = Charge.up
           $07cf = Charge.upleft
           $07df = Charge.left
           $07ec = Charge.downleft
           $07fc = Charge.down
           $0809 = Charge.downright
           $0819 = MoveNormal
           $0834 = MoveNormal.right
           $0841 = MoveNormal.upright
           $0851 = MoveNormal.up
           $085e = MoveNormal.upleft
           $086e = MoveNormal.left
           $087b = MoveNormal.downleft
           $088b = MoveNormal.down
           $0898 = MoveNormal.downright
           $08a8 = ObjUpdate_Player
           $08b1 = Player_Draw
           $08d7 = ScrollDown
           $0901 = ScrollDown.doNotLoadNewTiles
           $0904 = ScrollDown.collision
           $090e = ScrollUp
           $0938 = ScrollUp.doNotLoadNewTiles
           $093b = ScrollUp.collision
           $0949 = ScrollRight
           $0973 = ScrollRight.doNotLoadNewTiles
           $0976 = ScrollRight.collision
           $0980 = ScrollLeft
           $09aa = ScrollLeft.doNotLoadNewTiles
           $09ad = ScrollLeft.collision
  SECTION: $09bb-$0b74 ($01ba bytes) ["Collision Detection"]
           $09bb = IsSolid
           $09c7 = IsSolid.enemyspot
           $09c9 = GetPlayerCollisionRight
           $0a16 = GetPlayerCollisionRight.nocollision
           $0a18 = GetPlayerCollisionRight.collision
           $0a1b = GetPlayerCollisionLeft
           $0a68 = GetPlayerCollisionLeft.nocollision
           $0a6a = GetPlayerCollisionLeft.collision
           $0a6d = GetPlayerCollisionUp
           $0aba = GetPlayerCollisionUp.nocollision
           $0abc = GetPlayerCollisionUp.collision
           $0abf = GetPlayerCollisionDown
           $0b0c = GetPlayerCollisionDown.nocollision
           $0b0e = GetPlayerCollisionDown.collision
           $0b11 = GetCollisionAtBC
           $0b18 = PlayerCollObject
           $0b1b = PlayerCollObject.loop
           $0b31 = GetObjPlyColl
           $0b41 = GetObjPlyColl.noCarryX
           $0b53 = GetObjPlyColl.collisionX
           $0b61 = GetObjPlyColl.noCarryY
           $0b73 = GetObjPlyColl.collisionY
  SECTION: $0b75-$0d0c ($0198 bytes) ["Misc"]
           $0b75 = memcpy.mc
           $0b75 = memcpy
           $0b7f = PopSlideCopy
           $0b86 = PopSlideCopy.loop
           $0ba8 = waitVBlank
           $0ba8 = waitVBlank.wait
           $0bb1 = RunSubroutine
           $0bb2 = CopyScreen
           $0bbc = CopyScreen.ver_loopc
           $0bbe = CopyScreen.hor_loopc
           $0be1 = CopyScreen.ver_loop
           $0be3 = CopyScreen.hor_loop
           $0bf6 = CopyText
           $0c01 = CopyText.line
           $0c0c = CopyTextBox
           $0c11 = CopyTextBox.loop
           $0c2e = CopyTextBox.loop2
           $0c3a = SetCollectableFlag
           $0c4c = SetCollectableFlag.loop
           $0c53 = GetCollectableFlag
           $0c66 = GetCollectableFlag.loop
           $0c6d = _clear8
           $0c72 = InitVariables
           $0ca4 = LoadPalettes
           $0cac = LoadPalettes.paletteLoopBG
           $0cba = LoadPalettes.paletteLoopOBJ
           $0cc1 = ClearRAM
           $0cc5 = ClearRAM.fillWRAMwithZeros
           $0cce = ClearRAM.fillHRAMwithZeros
           $0cd4 = ClearTilemap
           $0cd8 = ClearTilemap.loop
           $0cde = LoadFont
           $0ce8 = LoadFont.copyFontLoop
           $0cfc = MapHandler_GetMapDataPointer
  SECTION: $0d0d-$0e74 ($0168 bytes) ["Screens"]
           $0d0d = screen_title
  SECTION: $0e75-$0fce ($015a bytes) ["Map Handler"]
           $0e75 = MapHandler_GetPointers
           $0e9b = HandleGBCpalettes
           $0ecb = HandleGBCpalettes.nopalettes
           $0ecd = HandleObjectTile
           $0ee5 = HandleObjectTile.end
           $0ee9 = m_MapHandler_LoadStripX
           $0ef0 = m_MapHandler_LoadStripX.copyLoop
           $0f02 = m_MapHandler_LoadStripX.noObject
           $0f1f = m_MapHandler_LoadStripX.no_carry_u1
           $0f2d = m_MapHandler_LoadStripY
           $0f34 = m_MapHandler_LoadStripY.copyLoop
           $0f46 = m_MapHandler_LoadStripY.noObject
           $0f78 = SetScroll
           $0f97 = HandleOneTileStrip
           $0fab = HandleOneTileStrip.loadRight
           $0fb4 = HandleOneTileStrip.loadUp
           $0fbd = HandleOneTileStrip.loadLeft
           $0fc6 = HandleOneTileStrip.loadDown
  SECTION: $0fcf-$10d3 ($0105 bytes) ["Bullet"]
           $0fcf = Object_Start_Bullet
           $1014 = Object_Start_Bullet.right
           $101b = Object_Start_Bullet.upright
           $1023 = Object_Start_Bullet.up
           $102a = Object_Start_Bullet.upleft
           $1032 = Object_Start_Bullet.left
           $1039 = Object_Start_Bullet.downleft
           $1041 = Object_Start_Bullet.down
           $1048 = Object_Start_Bullet.downright
           $1050 = Object_Start_Bullet.afterSettingVelocity
           $1051 = Object_Update_Bullet
           $1069 = Object_Update_Bullet.handleVelX
           $1076 = Object_Update_Bullet.xNegativeNoChange
           $1081 = Object_Update_Bullet.endVelX
           $1083 = Object_Update_Bullet.handleVelY
           $1091 = Object_Update_Bullet.yNegativeNoChange
           $109c = Object_Update_Bullet.endVelY
           $10aa = Object_Update_Bullet.destroyBullet
           $10b9 = Object_Update_Bullet.endOfSubroutine
           $10ba = Object_DrawSingle
           $10c7 = Object_Draw_Bullet
  SECTION: $10d4-$115c ($0089 bytes) ["LYC handler"]
           $10d4 = LYChandler
           $10ee = LYChandler.line8disableWindow
           $10f2 = LYChandler.waitForMode_u2
           $1113 = LYChandler.endIf
           $111a = LYChandler.line144enableWindow
           $111e = LYChandler.waitForMode_u3
           $113d = LYChandler.lineXshowMessageBox
           $1141 = LYChandler.waitForMode_u4
  SECTION: $115d-$11dd ($0081 bytes) ["Message Box"]
           $115d = StateStart_MessageBox
           $116b = StateStart_MessageBox.else_
           $1174 = StateStart_MessageBox.endIf
           $1179 = StateUpdate_MessageBox
           $118b = StateUpdate_MessageBox.OpeningBox
           $1197 = StateUpdate_MessageBox.afterIf
           $119d = StateUpdate_MessageBox.StartDisplayText
           $11b2 = StateUpdate_MessageBox.Waiting
           $11b3 = StateUpdate_MessageBox.WaitForApress
           $11bf = StateUpdate_MessageBox.endIf
           $11c0 = StateUpdate_MessageBox.ClosingBox
           $11ce = StateUpdate_MessageBox.loop
  SECTION: $11de-$1234 ($0057 bytes) ["Title Screen"]
           $11de = StateStart_TitleScreen
           $1220 = StateUpdate_TitleScreen
           $122b = StateUpdate_TitleScreen.startPressed
  SECTION: $1235-$127e ($004a bytes) ["Text Handler"]
           $1235 = StateStart_DebugWarning
           $1244 = StateStart_DebugWarning.whiteTileLoop
           $126c = StateUpdate_DebugWarning
           $1275 = StateUpdate_DebugWarning.goToTitleScreen
  SECTION: $127f-$12c4 ($0046 bytes) ["Multiply"]
           $127f = Mul8x8to16
  SECTION: $12c5-$1308 ($0044 bytes) ["error handler"]
           $12c5 = ErrorHandler
  SECTION: $1309-$134b ($0043 bytes) ["Controls"]
           $1309 = GetJoypadStatus
           $134b = GetJoypadStatus.knownRet
  SECTION: $134c-$136c ($0021 bytes) ["Red Gem"]
           $134c = Object_Start_RedGem
           $134f = Object_Update_RedGem
           $1352 = Object_Draw_RedGem
           $1368 = Object_PlyColl_RedGem
  SECTION: $136d-$138d ($0021 bytes) ["Purple Gem"]
           $136d = Object_Start_PurpleGem
           $1370 = Object_Update_PurpleGem
           $1373 = Object_Draw_PurpleGem
           $1389 = Object_PlyColl_PurpleGem
  SECTION: $138e-$13ae ($0021 bytes) ["Yellow Gem"]
           $138e = Object_Start_YellowGem
           $1391 = Object_Update_YellowGem
           $1394 = Object_Draw_YellowGem
           $13aa = Object_PlyColl_YellowGem
    SLACK: $2c9f bytes

ROMX bank #1:
  SECTION: $4000-$48db ($08dc bytes) ["map_tutorial"]
           $4000 = map_tutorial
  SECTION: $4900-$56ff ($0e00 bytes) ["tileset_crawdad"]
           $4900 = tileset_crawdad_tiles
           $5700 = tileset_crawdad_tiles_end
  SECTION: $5700-$5caf ($05b0 bytes) ["tileset_title_tiles"]
           $5700 = tileset_title_tiles
           $5cb0 = tileset_title_tiles_end
  SECTION: $5d00-$60ff ($0400 bytes) ["font"]
           $5d00 = font_tiles
           $6100 = font_tiles_end
  SECTION: $6100-$625f ($0160 bytes) ["tileset_gui"]
           $6100 = tileset_gui_tiles
           $6260 = tileset_gui_tiles_end
  SECTION: $6280-$62ff ($0080 bytes) ["tileset_crawdad_palette"]
           $6280 = tileset_crawdad_palette
           $6300 = tileset_crawdad_palette_end
  SECTION: $6300-$643f ($0140 bytes) ["sprites_crawdad"]
           $6300 = sprites_crawdad_tiles
           $6440 = sprites_crawdad_tiles_end
  SECTION: $6480-$64b7 ($0038 bytes) ["sprites_crawdad_palette"]
           $6480 = sprites_crawdad_palette
           $64b8 = sprites_crawdad_palette_end
  SECTION: $6500-$65ff ($0100 bytes) ["tileset_title_palassign"]
           $6500 = tileset_title_palassign
           $6600 = tileset_title__palassign_end
  SECTION: $6600-$66ff ($0100 bytes) ["tileset_crawdad_palassign"]
           $6600 = tileset_crawdad_palassign
           $6700 = tileset_crawdad__palassign_end
  SECTION: $6700-$678f ($0090 bytes) ["tileset_title_meta"]
           $6700 = tileset_title_meta
           $6790 = tileset_title_meta_end
  SECTION: $7e00-$7e00 ($0001 byte) ["map_tutorial metadata"]
           $7e00 = map_tutorial_meta
  SECTION: $7f00-$7f2f ($0030 bytes) ["map_tutorial objects"]
           $7f00 = map_tutorial_obj
    SLACK: $195b bytes

WRAM0 bank #0:
  SECTION: $c000-$c1ff ($0200 bytes) ["Object Arrays 2"]
           $c000 = Object_IDs
           $c100 = Object_Types
           $c100 = Object_IDsEnd
           $c200 = Object_TypesEnd
  SECTION: $c200-$c2ff ($0100 bytes) ["Shadow OAM"]
           $c200 = pPlayerSpriteSlot
           $c200 = wShadowOAM
           $c208 = sprites_bullets
           $c220 = sprites_objects
           $c2a0 = wShadowOAMend
  SECTION: $c300-$c323 ($0024 bytes) ["Buffers"]
           $c300 = TextBuffer
           $c324 = TextBufferEnd
  SECTION: $c324-$c337 ($0014 bytes) ["Main variables"]
           $c324 = wCameraX
           $c324 = WRAMvariables
           $c325 = wCameraY
           $c326 = wScrollX
           $c328 = wScrollY
           $c32a = wCurrMoveSpeed
           $c32c = wPlayerDirection
           $c32d = wBooleans
           $c32e = wCollisionResult1
           $c32f = wCollisionResult2
           $c330 = wCurrCheckOnScreenObj
           $c331 = wShootTimer
           $c332 = wPlayerHealth
           $c333 = wCurrGemDec1
           $c334 = wCurrGemDec2
           $c335 = wMsgBoxAnimTimer
           $c336 = wMsgBoxAnimState
           $c337 = wHandlingUpdateMethod
           $c338 = WRAMvariablesEnd
  SECTION: $c340-$c35f ($0020 bytes) ["Object Arrays 3"]
           $c340 = Object_Flags
           $c360 = Object_FlagsEnd
  SECTION: $c400-$c401 ($0002 bytes) ["Debug variables"]
           $c400 = iErrorCode
    SLACK: $0ca6 bytes

WRAMX bank #1:
  SECTION: $d000-$dfff ($1000 bytes) ["Object Arrays 1"]
           $d000 = Object_Table
    SLACK: $0000 bytes

HRAM bank #0:
  SECTION: $ff80-$ff94 ($0015 bytes) ["HRAM variables"]
           $ff80 = hCurrentState
           $ff81 = hMapLoaded
           $ff82 = hMapWidth
           $ff83 = hJoypadCurrent
           $ff84 = hJoypadLast
           $ff85 = hJoypadPressed
           $ff86 = hJoypadReleased
           $ff87 = hGameboyType
           $ff88 = hRegStorage1
           $ff89 = hRegStorage2
           $ff8a = hRegStorage3
           $ff8b = hMapLoaderMode
           $ff8c = hMapLoaderLoopCounter
           $ff8d = hMapLoaderLoopDEHL
           $ff91 = bDebugValue
           $ff93 = hSPstorage
  SECTION: $ff95-$ff9c ($0008 bytes) ["OAM DMA"]
           $ff95 = hOAMDMA
    SLACK: $0062 bytes

USED:
    ROM0: $1361 bytes in 1 bank
    ROMX: $26a5 bytes in 1 bank
    WRAM0: $035a bytes in 1 bank
    WRAMX: $1000 bytes in 1 bank
    HRAM: $001d bytes in 1 bank
