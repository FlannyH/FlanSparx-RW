ROM0 bank #0:
  SECTION: $0000-$0035 ($0036 bytes) ["Sprite orders"]
           $0000 = SpriteOrders_Player
           $0000 = SprPlayer_0
           $0004 = SprPlayer_45
           $0008 = SprPlayer_90
           $000c = SprPlayer_135
           $0010 = SprPlayer_180
           $0014 = SprPlayer_225
           $0018 = SprPlayer_270
           $001c = SprPlayer_315
           $0020 = SprBlueGem
           $0024 = SprBullet
           $0026 = SprGreenGem
           $002a = SprPurpleGem
           $002e = SprRedGem
           $0032 = SprYellowGem
  SECTION: $0038-$003a ($0003 bytes) ["hard crash"]
           $0038 = Error2
  SECTION: $0040-$0043 ($0004 bytes) ["Vblank Vector"]
  SECTION: $0048-$004a ($0003 bytes) ["LYC Interrupt"]
  SECTION: $004b-$007e ($0034 bytes) ["Sprite Handler"]
           $004b = HandleSprites
           $0059 = FillShadowOAM
           $0061 = FillShadowOAM.fillLoop
           $0079 = FillShadowOAM.endLoop
           $007a = FillShadowOAM.zeroTheRestLoop
  SECTION: $0080-$00bf ($0040 bytes) ["Tileset Solidness"]
           $0080 = tileset_solidness
  SECTION: $00c0-$00e1 ($0022 bytes) ["Init"]
           $00c0 = Start
           $00de = Start.halt
  SECTION: $00e2-$00f9 ($0018 bytes) ["Vblank Handler"]
           $00e2 = Vblank
  SECTION: $0100-$014f ($0050 bytes) ["Jumpstart Code"]
           $0100 = Jumpstart
  SECTION: $0150-$01d9 ($008a bytes) ["Title Screen"]
           $0150 = StateStart_TitleScreen
           $0177 = StateStart_TitleScreen.copyFontLoop
           $01aa = StateStart_TitleScreen.paletteLoopBG
           $01b8 = StateStart_TitleScreen.paletteLoopOBJ
           $01c5 = StateUpdate_TitleScreen
           $01d0 = StateUpdate_TitleScreen.startPressed
  SECTION: $01da-$01fa ($0021 bytes) ["Blue Gem"]
           $01da = Object_Start_BlueGem
           $01dd = Object_Update_BlueGem
           $01e0 = Object_Draw_BlueGem
           $01f6 = Object_PlyColl_BlueGem
  SECTION: $0200-$02ff ($0100 bytes) ["LUTs"]
           $0200 = Mul4LUT
  SECTION: $0300-$030d ($000e bytes) ["Start Routine Pointers"]
           $0300 = Object_StartRoutinePointers
  SECTION: $030e-$03f1 ($00e4 bytes) ["Object Manager"]
           $030e = Object_SpawnObject
           $0311 = Object_SpawnObject.findSlotloop
           $031a = Object_SpawnObject.yesDoThisOne
           $0330 = Object_Update
           $0333 = Object_Update.objectUpdateLoop
           $0346 = Object_Update.continue
           $034c = Object_CheckOnScreen
           $036d = Object_CheckOnScreen.otherwise
           $038a = Object_CheckOnScreen.onScreen
           $0391 = Object_CheckOnScreen.offScreen
           $0398 = Object_DestroyCurrent
           $03a0 = Object_CleanTypeArray
           $03a3 = Object_CleanTypeArray.loop
           $03ac = Object_CleanTypeArray.writeZero
           $03ae = Object_CleanTypeArray.notWriteZero
           $03b3 = Object_PlyColl_None
           $03b3 = Object_Update_None
           $03b3 = Object_Start_None
           $03b3 = Object_Draw_None
           $03b5 = PrepareSpriteDraw
  SECTION: $0400-$040d ($000e bytes) ["Update Routine Pointers"]
           $0400 = Object_UpdateRoutinePointers
  SECTION: $040e-$04e0 ($00d3 bytes) ["User Interface"]
           $040e = UpdateHUD
           $0430 = UpdateHUD.tile1
           $043a = UpdateHUD.notEmpty1
           $0445 = UpdateHUD.notHalf1
           $0448 = UpdateHUD.tile2
           $0452 = UpdateHUD.notEmpty2
           $045c = UpdateHUD.notHalf2
           $045f = UpdateHUD.tile3
           $0466 = UpdateHUD.notEmpty3
           $046d = UpdateHUD.notHalf3
           $0471 = ClearWindowLayer
           $0476 = ClearWindowLayer.loop1
           $0489 = ClearWindowLayer.loop2
           $0492 = InitWindowLayer
           $049b = InitWindowLayer.loopHor1
           $04ab = InitWindowLayer.loopTextRow1
           $04c0 = InitWindowLayer.loopTextRow2
           $04d0 = InitWindowLayer.loopHor2
  SECTION: $04e1-$04f5 ($0015 bytes) ["OAM DMA routine"]
           $04e1 = CopyDMARoutine
           $04e7 = CopyDMARoutine.copy
           $04ee = DMARoutine
           $04f2 = DMARoutine.wait
           $04f6 = DMARoutineEnd
  SECTION: $0500-$050d ($000e bytes) ["Player Collision Routine Pointers"]
           $0500 = Object_PlyCollRoutinePointers
  SECTION: $050e-$05d3 ($00c6 bytes) ["Title Screen Loop"]
           $050e = StateStart_GameLoop
           $0532 = StateStart_GameLoop.noGBC
           $0568 = StateStart_GameLoop.clear_loop
           $059e = StateStart_GameLoop.loop
           $05b6 = StateUpdate_GameLoop
           $05ca = StateUpdate_GameLoop.checkLoop
  SECTION: $05d4-$05f4 ($0021 bytes) ["Green Gem"]
           $05d4 = Object_Start_GreenGem
           $05d7 = Object_Update_GreenGem
           $05da = Object_Draw_GreenGem
           $05f0 = Object_PlyColl_GreenGem
  SECTION: $0600-$060d ($000e bytes) ["Draw Routine Pointers"]
           $0600 = Object_DrawRoutinePointers
  SECTION: $060e-$06c4 ($00b7 bytes) ["Text Data"]
           $060e = Text_Title_PressStart
           $061b = Text_Debug_Warning
           $06a0 = Text_Debug_Error
  SECTION: $06c5-$06e5 ($0021 bytes) ["Red Gem"]
           $06c5 = Object_Start_RedGem
           $06c8 = Object_Update_RedGem
           $06cb = Object_Draw_RedGem
           $06e1 = Object_PlyColl_RedGem
  SECTION: $0700-$070a ($000b bytes) ["StateUpdate"]
           $0700 = States
           $070a = StateUpdate_None
           $070a = StateStart_None
  SECTION: $070b-$096f ($0265 bytes) ["Player Handler"]
           $070b = Player_HandleInput
           $0715 = Player_HandleInput.endIf
           $072b = Player_HandleInput.countTimer
           $072e = Player_HandleInput.afterBullet
           $0745 = Player_HandleInput.handleRight
           $074e = Player_HandleInput.noInc1
           $0756 = Player_HandleInput.noDec1
           $0758 = Player_HandleInput.handleLeft
           $0761 = Player_HandleInput.noInc2
           $0768 = Player_HandleInput.noDec2
           $076a = Player_HandleInput.handleUp
           $076e = Player_HandleInput.handleDown
           $0772 = Player_HandleInput.afterPlayerInput
           $0779 = Player_HandleInput.handleMovement
           $0785 = Charge
           $07a0 = Charge.right
           $07ab = Charge.upright
           $07b9 = Charge.up
           $07c4 = Charge.upleft
           $07d2 = Charge.left
           $07dd = Charge.downleft
           $07eb = Charge.down
           $07f6 = Charge.downright
           $0804 = MoveNormal
           $081e = MoveNormal.right
           $0829 = MoveNormal.upright
           $0837 = MoveNormal.up
           $0842 = MoveNormal.upleft
           $0850 = MoveNormal.left
           $085b = MoveNormal.downleft
           $0869 = MoveNormal.down
           $0874 = MoveNormal.downright
           $0882 = ObjUpdate_Player
           $08b0 = ScrollDown
           $08d3 = ScrollDown.doNotLoadNewTiles
           $08d5 = ScrollDown.collision
           $08de = ScrollUp
           $0901 = ScrollUp.doNotLoadNewTiles
           $0903 = ScrollUp.collision
           $0910 = ScrollRight
           $0933 = ScrollRight.doNotLoadNewTiles
           $0935 = ScrollRight.collision
           $093e = ScrollLeft
           $0961 = ScrollLeft.doNotLoadNewTiles
           $0963 = ScrollLeft.collision
  SECTION: $0970-$0b82 ($0213 bytes) ["Collision Detection"]
           $0970 = IsSolid
           $097c = IsSolid.enemyspot
           $097e = GetPlayerCollisionRight
           $09df = GetPlayerCollisionRight.nocollision
           $09e1 = GetPlayerCollisionRight.collision
           $09e4 = GetPlayerCollisionLeft
           $0a45 = GetPlayerCollisionLeft.nocollision
           $0a47 = GetPlayerCollisionLeft.collision
           $0a4a = GetPlayerCollisionUp
           $0aab = GetPlayerCollisionUp.nocollision
           $0aad = GetPlayerCollisionUp.collision
           $0ab0 = GetPlayerCollisionDown
           $0b11 = GetPlayerCollisionDown.nocollision
           $0b13 = GetPlayerCollisionDown.collision
           $0b16 = GetCollisionAtBC
           $0b2a = PlayerCollObject
           $0b2d = PlayerCollObject.loop
           $0b43 = GetObjPlyColl
           $0b52 = GetObjPlyColl.noCarryX
           $0b63 = GetObjPlyColl.collisionX
           $0b70 = GetObjPlyColl.noCarryY
           $0b81 = GetObjPlyColl.collisionY
  SECTION: $0b83-$0d51 ($01cf bytes) ["Map Handler"]
           $0b83 = HandleObjectTile
           $0b9b = HandleObjectTile.end
           $0b9f = m_MapHandler_LoadStripX
           $0bd3 = m_MapHandler_LoadStripX.copyLoop
           $0be5 = m_MapHandler_LoadStripX.noObject
           $0c01 = m_MapHandler_LoadStripX.wait_u4
           $0c1e = m_MapHandler_LoadStripX.nopalettes
           $0c20 = m_MapHandler_LoadStripX.wait_u5
           $0c3b = m_MapHandler_LoadStripX.no_carry_u6
           $0c49 = m_MapHandler_LoadStripY
           $0c7d = m_MapHandler_LoadStripY.copyLoop
           $0c8f = m_MapHandler_LoadStripY.noObject
           $0cab = m_MapHandler_LoadStripY.wait_u10
           $0cc8 = m_MapHandler_LoadStripY.nopalettes
           $0ccd = m_MapHandler_LoadStripY.waitForMode_u11
           $0cfb = SetScroll
           $0d1a = HandleOneTileStrip
           $0d2e = HandleOneTileStrip.loadRight
           $0d37 = HandleOneTileStrip.loadUp
           $0d40 = HandleOneTileStrip.loadLeft
           $0d49 = HandleOneTileStrip.loadDown
  SECTION: $0d52-$0eb9 ($0168 bytes) ["Screens"]
           $0d52 = screen_title
  SECTION: $0eba-$0fbf ($0106 bytes) ["Misc"]
           $0eba = memcpy.mc
           $0eba = memcpy
           $0ec4 = waitVBlank
           $0ec4 = waitVBlank.wait
           $0ecd = RunSubroutine
           $0ece = CopyScreen
           $0ed8 = CopyScreen.ver_loopc
           $0eda = CopyScreen.hor_loopc
           $0efd = CopyScreen.ver_loop
           $0eff = CopyScreen.hor_loop
           $0f12 = CopyText
           $0f1d = CopyText.line
           $0f28 = CopyTextBox
           $0f2d = CopyTextBox.loop
           $0f4a = CopyTextBox.loop2
           $0f56 = SetCollectableFlag
           $0f68 = SetCollectableFlag.loop
           $0f6f = GetCollectableFlag
           $0f82 = GetCollectableFlag.loop
           $0f89 = _clear8
           $0f8e = InitVariables
  SECTION: $0fc0-$10bf ($0100 bytes) ["Bullet"]
           $0fc0 = Object_Start_Bullet
           $1000 = Object_Start_Bullet.right
           $1007 = Object_Start_Bullet.upright
           $100f = Object_Start_Bullet.up
           $1016 = Object_Start_Bullet.upleft
           $101e = Object_Start_Bullet.left
           $1025 = Object_Start_Bullet.downleft
           $102d = Object_Start_Bullet.down
           $1034 = Object_Start_Bullet.downright
           $103c = Object_Start_Bullet.afterSettingVelocity
           $103d = Object_Update_Bullet
           $1055 = Object_Update_Bullet.handleVelX
           $1062 = Object_Update_Bullet.xNegativeNoChange
           $106d = Object_Update_Bullet.endVelX
           $106f = Object_Update_Bullet.handleVelY
           $107d = Object_Update_Bullet.yNegativeNoChange
           $1088 = Object_Update_Bullet.endVelY
           $1096 = Object_Update_Bullet.destroyBullet
           $10a5 = Object_Update_Bullet.endOfSubroutine
           $10a6 = Object_DrawSingle
           $10b3 = Object_Draw_Bullet
  SECTION: $10c0-$1146 ($0087 bytes) ["LYC handler"]
           $10c0 = LYChandler
           $10d9 = LYChandler.line8disableWindow
           $10dd = LYChandler.waitForMode_u2
           $10fd = LYChandler.endIf
           $1104 = LYChandler.line144enableWindow
           $1108 = LYChandler.waitForMode_u3
           $1127 = LYChandler.lineXshowMessageBox
           $112b = LYChandler.waitForMode_u4
  SECTION: $1147-$11cd ($0087 bytes) ["Common Gem Code"]
           $1147 = Object_Start_GemCommon
           $1167 = Object_Start_GemCommon.loop
           $116c = Object_Update_GemCommon
           $1181 = Object_Update_GemCommon.unloadGem
           $1190 = Obj_PlyColl_GemCommon
           $11cd = Obj_PlyColl_GemCommon.noCollision
  SECTION: $11ce-$1250 ($0083 bytes) ["Text Handler"]
           $11ce = StateStart_DebugWarning
           $11dd = StateStart_DebugWarning.whiteTileLoop
           $11e5 = StateStart_DebugWarning.loop_u2
           $11f7 = StateStart_DebugWarning.copyFontLoop
           $121b = StateStart_DebugWarning.paletteLoopBG
           $1229 = StateStart_DebugWarning.paletteLoopOBJ
           $123e = StateUpdate_DebugWarning
           $1247 = StateUpdate_DebugWarning.goToTitleScreen
  SECTION: $1251-$12c6 ($0076 bytes) ["Message Box"]
           $1251 = StateStart_MessageBox
           $125d = StateStart_MessageBox.else_
           $1264 = StateStart_MessageBox.endIf
           $1269 = StateUpdate_MessageBox
           $127a = StateUpdate_MessageBox.OpeningBox
           $1284 = StateUpdate_MessageBox.afterIf
           $1289 = StateUpdate_MessageBox.StartDisplayText
           $129c = StateUpdate_MessageBox.Waiting
           $129d = StateUpdate_MessageBox.WaitForApress
           $12a9 = StateUpdate_MessageBox.endIf
           $12aa = StateUpdate_MessageBox.ClosingBox
           $12b7 = StateUpdate_MessageBox.loop
  SECTION: $12c7-$130c ($0046 bytes) ["Multiply"]
           $12c7 = Mul8x8to16
  SECTION: $130d-$1350 ($0044 bytes) ["error handler"]
           $130d = ErrorHandler
  SECTION: $1351-$1393 ($0043 bytes) ["Controls"]
           $1351 = GetJoypadStatus
           $1393 = GetJoypadStatus.knownRet
  SECTION: $1394-$13b4 ($0021 bytes) ["Purple Gem"]
           $1394 = Object_Start_PurpleGem
           $1397 = Object_Update_PurpleGem
           $139a = Object_Draw_PurpleGem
           $13b0 = Object_PlyColl_PurpleGem
  SECTION: $13b5-$13d5 ($0021 bytes) ["Yellow Gem"]
           $13b5 = Object_Start_YellowGem
           $13b8 = Object_Update_YellowGem
           $13bb = Object_Draw_YellowGem
           $13d1 = Object_PlyColl_YellowGem
    SLACK: $2c7e bytes

ROMX bank #1:
  SECTION: $4000-$48db ($08dc bytes) ["map_tutorial"]
           $4000 = map_tutorial
  SECTION: $4900-$56ff ($0e00 bytes) ["tileset_crawdad"]
           $4900 = tileset_crawdad_tiles
           $5700 = tileset_crawdad_tiles_end
  SECTION: $5700-$5caf ($05b0 bytes) ["tileset_title_tiles"]
           $5700 = tileset_title_tiles
           $5cb0 = tileset_title_tiles_end
  SECTION: $5d00-$60ff ($0400 bytes) ["font"]
           $5d00 = font_tiles
           $6100 = font_tiles_end
  SECTION: $6100-$625f ($0160 bytes) ["tileset_gui"]
           $6100 = tileset_gui_tiles
           $6260 = tileset_gui_tiles_end
  SECTION: $6280-$62ff ($0080 bytes) ["tileset_crawdad_palette"]
           $6280 = tileset_crawdad_palette
           $6300 = tileset_crawdad_palette_end
  SECTION: $6300-$63ff ($0100 bytes) ["sprites_crawdad"]
           $6300 = sprites_crawdad_tiles
           $6400 = sprites_crawdad_tiles_end
  SECTION: $6400-$64ff ($0100 bytes) ["tileset_title_palassign"]
           $6400 = tileset_title_palassign
           $6500 = tileset_title__palassign_end
  SECTION: $6500-$65ff ($0100 bytes) ["tileset_crawdad_palassign"]
           $6500 = tileset_crawdad_palassign
           $6600 = tileset_crawdad__palassign_end
  SECTION: $6600-$668f ($0090 bytes) ["tileset_title_meta"]
           $6600 = tileset_title_meta
           $6690 = tileset_title_meta_end
  SECTION: $7e00-$7e00 ($0001 byte) ["map_tutorial metadata"]
           $7e00 = map_tutorial_meta
  SECTION: $7f00-$7f2f ($0030 bytes) ["map_tutorial objects"]
           $7f00 = map_tutorial_obj
    SLACK: $19d3 bytes

WRAM0 bank #0:
  SECTION: $c000-$c1ff ($0200 bytes) ["Object Arrays 2"]
           $c000 = Object_IDs
           $c100 = Object_Types
           $c100 = Object_IDsEnd
           $c200 = Object_TypesEnd
  SECTION: $c200-$c2ff ($0100 bytes) ["Shadow OAM"]
           $c200 = pPlayerSpriteSlot
           $c200 = wShadowOAM
           $c208 = sprites_bullets
           $c220 = sprites_objects
           $c2a0 = wShadowOAMend
  SECTION: $c300-$c323 ($0024 bytes) ["Buffers"]
           $c300 = TextBuffer
           $c324 = TextBufferEnd
  SECTION: $c340-$c35f ($0020 bytes) ["Object Arrays 3"]
           $c340 = Object_Flags
           $c360 = Object_FlagsEnd
  SECTION: $c400-$c401 ($0002 bytes) ["Debug variables"]
           $c400 = iErrorCode
    SLACK: $0cba bytes

WRAMX bank #1:
  SECTION: $d000-$dfff ($1000 bytes) ["Object Arrays 1"]
           $d000 = Object_Table
    SLACK: $0000 bytes

HRAM bank #0:
  SECTION: $ff80-$ffa6 ($0027 bytes) ["HRAM"]
           $ff80 = HRAMvariables
           $ff80 = pCurrentState
           $ff81 = bMapLoaded
           $ff82 = bMapWidth
           $ff83 = bCameraX
           $ff84 = bCameraY
           $ff85 = iScrollX
           $ff87 = iScrollY
           $ff89 = iCurrMoveSpeed
           $ff8b = bPlayerDirection
           $ff8c = bBooleans
           $ff8d = bCollisionResult1
           $ff8e = bCollisionResult2
           $ff8f = bCurrCheckOnScreenObj
           $ff90 = bShootTimer
           $ff91 = bPlayerHealth
           $ff92 = bCurrGemDec1
           $ff93 = bCurrGemDec2
           $ff94 = bMsgBoxAnimTimer
           $ff95 = bMsgBoxAnimState
           $ff96 = bHandlingUpdateMethod
           $ff97 = bJoypadCurrent
           $ff98 = bJoypadLast
           $ff99 = bJoypadPressed
           $ff9a = bJoypadReleased
           $ff9b = bGameboyType
           $ff9c = bRegStorage1
           $ff9d = bRegStorage2
           $ff9e = bRegStorage3
           $ff9f = bMapLoaderMode
           $ffa0 = bMapLoaderLoopCounter
           $ffa1 = bMapLoaderLoopDEHL
           $ffa5 = bDebugValue
           $ffa7 = HRAMvariablesEnd
  SECTION: $ffa7-$ffae ($0008 bytes) ["OAM DMA"]
           $ffa7 = hOAMDMA
    SLACK: $0050 bytes

USED:
    ROM0: $1382 bytes in 1 bank
    ROMX: $262d bytes in 1 bank
    WRAM0: $0346 bytes in 1 bank
    WRAMX: $1000 bytes in 1 bank
    HRAM: $002f bytes in 1 bank
