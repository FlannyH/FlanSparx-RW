01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft
08D3: 	bit 2, a
08D5: 	jp nz, Player_HandleInput.handleUp
08D8: 	bit 3, a
08DA: 	jp nz, Player_HandleInput.handleDown
08DD: 	jp Player_HandleInput.afterPlayerInput

Player_HandleInput.afterPlayerInput:
090D: 	ldh a, [hJoypadCurrent]
090F: 	bit 5, a
0911: 	jr nz, Charge
0913: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise
0D53: 	xor a
0D54: 	ld [wCurrCheckOnScreenObj], a
0D57: 	ld c, $01
0D59: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft
0CD5: 	bit 4, [hl]
0CD7: 	jr nz, HandleOneTileStrip.loadDown
0CD9: 	ret

04DD: 	ret

03FB: 	xor a
03FC: 	ld [wHandlingUpdateMethod], a
03FF: 	reti
==== Interrupt Exited ====

0026:         halt
0027:         jr .halt

0025:         halt
==== Interrupt Taken ====

_LABEL_40_:
0040: 	ei
0041: 	jp Vblank

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow
0EE9: 	cp $90
0EEB: 	jr z, LYChandler.line144enableWindow

LYChandler.line144enableWindow:
0F27: 	push hl
0F28: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u3:
0F2B: 	bit 1, [hl]
0F2D: 	jr nz, LYChandler.waitForMode_u3
0F2F: 	pop hl
0F30: 	ldh a, [rLCDC]
0F32: 	and $FD
0F34: 	or $10
0F36: 	ldh [rLCDC], a
0F38: 	ld a, $07
0F3A: 	ldh [rWX], a
0F3C: 	ld a, $07
0F3E: 	ldh [rWX], a
0F40: 	xor a
0F41: 	ldh [rWY], a
0F43: 	ld a, $08
0F45: 	ldh [rLYC], a
0F47: 	pop bc
0F48: 	pop af
0F49: 	reti
==== Interrupt Exited ====

Vblank:
03E5: 	ld a, [wHandlingUpdateMethod]
03E8: 	or a
03E9: 	ret nz
03EA: 	ld a, $01
03EC: 	ld [wHandlingUpdateMethod], a
03EF: 	ldh a, [hCurrentState]
03F1: 	add a
03F2: 	ld h, $07
03F4: 	ld l, a
03F5: 	ldi a, [hl]
03F6: 	ld h, [hl]
03F7: 	ld l, a
03F8: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

StateUpdate_GameLoop:
04C0: 	call UpdateHUD

UpdateHUD:
030E: 	ldh a, [rLY]
0310: 	cp $90
0312: 	ret c
0313: 	push hl
0314: 	ld hl, $9C02
0317: 	ld a, [wCurrGemDec1]
031A: 	add $74
031C: 	ldi [hl], a
031D: 	ld a, [wCurrGemDec2]
0320: 	swap a
0322: 	and $0F
0324: 	add $74
0326: 	ldi [hl], a
0327: 	ld a, [wCurrGemDec2]
032A: 	and $0F
032C: 	add $74
032E: 	ldi [hl], a
032F: 	ld l, $0F
0331: 	ld a, [wPlayerHealth]
0334: 	or a
0335: 	jr nz, UpdateHUD.notEmpty1
0337: 	ld a, $72
0339: 	ldi [hl], a
033A: 	ldi [hl], a
033B: 	ldi [hl], a
033C: 	pop hl
033D: 	ret

04C3: 	call HandleSprites

HandleSprites:
05C5: 	ld a, $C2
05C7: 	di
05C8: 	call hOAMDMA

FF95: 	ldh ($46), a
FF97: 	ld a, $28
FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3

FF99: 	dec a
FF9A: 	jr nz, -3
FF9C: 	ret

05CB: 	ei
05CC: 	ld a, [wBooleans]
05CF: 	xor $01
05D1: 	ld [wBooleans], a
05D4: 	reti

04C6: 	call SetScroll

SetScroll:
0CA3: 	ld a, [wPlayerPos.x_high]
0CA6: 	and $0F
0CA8: 	ld b, a
0CA9: 	ld a, [TextBufferEnd]
0CAC: 	and $F0
0CAE: 	add b
0CAF: 	swap a
0CB1: 	add $08
0CB3: 	ldh [rSCX], a
0CB5: 	ld a, [wPlayerPos.y_metatile]
0CB8: 	and $0F
0CBA: 	ld b, a
0CBB: 	ld a, [wPlayerPos.y_subpixel]
0CBE: 	and $F0
0CC0: 	add b
0CC1: 	swap a
0CC3: 	ldh [rSCY], a
0CC5: 	ret

04C9: 	call ObjUpdate_Player

ObjUpdate_Player:
097C: 	call GetJoypadStatus

GetJoypadStatus:
10BF: 	push hl
10C0: 	push bc
10C1: 	ld hl,  $FF00 | rP1
10C4: 	ld b, $00
10C6: 	ldh a, [hJoypadCurrent]
10C8: 	ldh [hJoypadLast], a
10CA: 	ld [hl], $10
10CC: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10CF: 	ld a, [hl]
10D0: 	ld a, [hl]
10D1: 	ld a, [hl]
10D2: 	ld a, [hl]
10D3: 	and $0F
10D5: 	swap a
10D7: 	ld b, a
10D8: 	ld [hl], $20
10DA: 	call GetJoypadStatus.knownRet

GetJoypadStatus.knownRet:
1101: 	ret

10DD: 	ld a, [hl]
10DE: 	ld a, [hl]
10DF: 	ld a, [hl]
10E0: 	ld a, [hl]
10E1: 	and $0F
10E3: 	or b
10E4: 	cpl
10E5: 	ldh [hJoypadCurrent], a
10E7: 	ldh a, [hJoypadLast]
10E9: 	ld b, a
10EA: 	ldh a, [hJoypadCurrent]
10EC: 	xor b
10ED: 	ld c, a
10EE: 	ldh a, [hJoypadCurrent]
10F0: 	and c
10F1: 	ldh [hJoypadPressed], a
10F3: 	ldh a, [hJoypadLast]
10F5: 	ld b, a
10F6: 	ldh a, [hJoypadCurrent]
10F8: 	xor b
10F9: 	ld c, a
10FA: 	ldh a, [hJoypadLast]
10FC: 	and c
10FD: 	ldh [hJoypadReleased], a
10FF: 	pop bc
1100: 	pop hl
GetJoypadStatus.knownRet:
1101: 	ret

097F: 	call Player_HandleInput

Player_HandleInput:
08A3: 	ldh a, [hJoypadCurrent]
08A5: 	cp $60
08A7: 	jr nz, Player_HandleInput.endIf

Player_HandleInput.endIf:
08AD: 	ld a, [wShootTimer]
08B0: 	or a
08B1: 	jr nz, Player_HandleInput.countTimer
08B3: 	ldh a, [hJoypadCurrent]
08B5: 	bit 4, a
08B7: 	jr z, Player_HandleInput.afterBullet

Player_HandleInput.afterBullet:
08C9: 	ldh a, [hJoypadCurrent]
08CB: 	bit 0, a
08CD: 	jr nz, Player_HandleInput.handleRight
08CF: 	bit 1, a
08D1: 	jr nz, Player_HandleInput.handleLeft

Player_HandleInput.handleLeft:
08F3: 	ld b, $04
08F5: 	ldh a, [hJoypadCurrent]
08F7: 	bit 2, a
08F9: 	jr z, Player_HandleInput.noInc2
Player_HandleInput.noInc2:
08FC: 	ldh a, [hJoypadCurrent]
08FE: 	bit 3, a
0900: 	jr z, Player_HandleInput.noDec2
Player_HandleInput.noDec2:
0903: 	jr Player_HandleInput.handleMovement

Player_HandleInput.handleMovement:
0914: 	ld a, b
0915: 	ld [wPlayerDirection], a
0918: 	ldh a, [hJoypadCurrent]
091A: 	bit 5, a
091C: 	jr nz, Charge
091E: 	jp MoveNormal

MoveNormal:
092F: 	ld a, [wPlayerDirection]
0932: 	ld b, a
0933: 	bit 0, a
0935: 	ld a, $14
0937: 	jr z, _Move
_Move._no_diagonal:
093B: 	ld [wCurrMoveSpeed], a
093E: 	ld a, b
093F: 	or a
0940: 	jr z, _Move.right
0942: 	dec a
0943: 	jr z, _Move.upright
0945: 	dec a
0946: 	jr z, _Move.up
0948: 	dec a
0949: 	jr z, _Move.upleft
094B: 	dec a
094C: 	jr z, _Move.left

_Move.left:
096A: 	jp ScrollLeft

ScrollLeft:
0A0E: 	ld a, [wCurrMoveSpeed]
0A11: 	ld b, a
0A12: 	ld a, [TextBufferEnd]
0A15: 	sub b
0A16: 	ld [TextBufferEnd], a
0A19: 	jr nc, ScrollLeft.collision

ScrollLeft.collision:
0A24: 	call GetPlayerCollisionLeft

GetPlayerCollisionLeft:
017A: 	ld de, $0000
017D: 	jp GetPlayerCollision

GetPlayerCollision:
0150: 	ldh a, [hMapLoaded]
0152: 	ld [$2000], a
0155: 	ld a, [wPlayerPos.x_high]
0158: 	add $05
015A: 	add d
015B: 	ld b, a
015C: 	ld a, [wPlayerPos.y_metatile]
015F: 	add $04
0161: 	add e
0162: 	ld c, a
0163: 	jp GetCollisionAtBC

GetCollisionAtBC:
018C: 	call MapHandler_GetMapDataPointer

MapHandler_GetMapDataPointer:
0892: 	push bc
0893: 	ldh a, [hMapWidth]
0895: 	ld b, a
0896: 	call Mul8x8to16

Mul8x8to16:
1035: 	ld d, $02
1037: 	ld h, $00
1039: 	ld a, b
103A: 	swap a
103C: 	and $0F
103E: 	ld e, a
103F: 	ld a, c
1040: 	and $0F
1042: 	swap a
1044: 	or e
1045: 	ld e, a
1046: 	ld a, [de]
1047: 	ld l, a
1048: 	ld a, b
1049: 	and $0F
104B: 	ld e, a
104C: 	ld a, c
104D: 	and $F0
104F: 	or e
1050: 	ld e, a
1051: 	ld a, [de]
1052: 	add l
1053: 	ld l, a
1054: 	adc h
1055: 	sub l
1056: 	ld h, a
1057: 	add hl, hl
1058: 	add hl, hl
1059: 	add hl, hl
105A: 	add hl, hl
105B: 	ld a, b
105C: 	and $0F
105E: 	ld e, a
105F: 	ld a, c
1060: 	and $0F
1062: 	swap a
1064: 	or e
1065: 	ld e, a
1066: 	ld a, [de]
1067: 	add l
1068: 	ld l, a
1069: 	adc h
106A: 	sub l
106B: 	ld h, a
106C: 	ld a, b
106D: 	swap a
106F: 	and $0F
1071: 	ld e, a
1072: 	ld a, c
1073: 	and $F0
1075: 	or e
1076: 	ld e, a
1077: 	ld a, [de]
1078: 	add h
1079: 	ld h, a
107A: 	ret

0899: 	pop bc
089A: 	ld a, l
089B: 	add b
089C: 	ld e, a
089D: 	adc h
089E: 	sub e
089F: 	or $40
08A1: 	ld d, a
08A2: 	ret

018F: 	ld a, [de]
0190: 	jp IsSolid

IsSolid:
0166: 	cp $40
0168: 	jr nc, IsSolid.enemyspot
016A: 	ld hl, tileset_solidness
016D: 	add l
016E: 	ld l, a
016F: 	bit 0, [hl]
0171: 	ret

0A27: 	jr z, ScrollLeft.schedule_load_and_go

ScrollLeft.schedule_load_and_go:
0A31: 	ld hl, wBooleans
0A34: 	set 3, [hl]
0A36: 	ret

0982: 	call PlayerCollObject

PlayerCollObject:
0193: 	ld hl, Object_Types
PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z
019C: 	add a
019D: 	push hl
019E: 	ld b, l
019F: 	dec b
01A0: 	ld l, a
01A1: 	ld h, $05
01A3: 	ldi a, [hl]
01A4: 	ld h, [hl]
01A5: 	ld l, a
01A6: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_PlyColl_PurpleGem:
113F: 	ld e, $25
1141: 	jp Obj_PlyColl_GemCommon

Obj_PlyColl_GemCommon:
0657: 	ld a, $01
0659: 	ldh [$FE], a
065B: 	swap b
065D: 	ld a, b
065E: 	and $F0
0660: 	ld l, a
0661: 	ld a, b
0662: 	and $0F
0664: 	or $D0
0666: 	ld h, a
0667: 	call GetObjPlyColl

GetObjPlyColl:
01AC: 	ld d, $00
01AE: 	inc l
01AF: 	ld a, [wScrollX]
01B2: 	sub [hl]
01B3: 	add $0C
01B5: 	bit 4, a
01B7: 	jr z, GetObjPlyColl.noCarryX

GetObjPlyColl.noCarryX:
01BC: 	ld b, a
01BD: 	ld a, [wPlayerPos.x_high]
01C0: 	adc $05
01C2: 	inc l
01C3: 	sub [hl]
01C4: 	or a
01C5: 	jr z, GetObjPlyColl.collisionX
01C7: 	cp $02
01C9: 	ret nc

066A: 	dec d
066B: 	jr nz, Obj_PlyColl_GemCommon.noCollision

Obj_PlyColl_GemCommon.noCollision:
0698: 	ret

01A9: 	pop hl
01AA: 	jr PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop

PlayerCollObject.loop:
0196: 	ldi a, [hl]
0197: 	inc a
0198: 	jr z, PlayerCollObject.loop
019A: 	dec a
019B: 	ret z

0985: 	ld a, [wPlayerDirection]
0988: 	add a
0989: 	add a
098A: 	add $C0
098C: 	ld d, $00
098E: 	ld e, a
098F: 	ld hl, Object_TypesEnd
0992: 	ld a, $50
0994: 	ldi [hl], a
0995: 	ld a, $50
0997: 	ldi [hl], a
0998: 	ld a, [de]
0999: 	ldi [hl], a
099A: 	inc e
099B: 	ld a, [de]
099C: 	ldi [hl], a
099D: 	inc e
099E: 	ld a, $50
09A0: 	ldi [hl], a
09A1: 	ld a, $58
09A3: 	ldi [hl], a
09A4: 	ld a, [de]
09A5: 	ldi [hl], a
09A6: 	inc e
09A7: 	ld a, [de]
09A8: 	ldi [hl], a
09A9: 	inc e
09AA: 	ret

04CC: 	call Object_Update

Object_Update:
0D1C: 	ld hl, Object_Types
Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z
0D25: 	add a
0D26: 	ld c, l
0D27: 	push hl
0D28: 	ld h, $04
0D2A: 	ld l, a
0D2B: 	ldi a, [hl]
0D2C: 	ld h, [hl]
0D2D: 	ld l, a
0D2E: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Update_PurpleGem:
1126: 	jp Object_Update_GemCommon

Object_Update_GemCommon:
0633: 	ld l, c
0634: 	ld a, c
0635: 	swap a
0637: 	and $0F
0639: 	add $D0
063B: 	ld h, a
063C: 	ld a, c
063D: 	swap a
063F: 	and $F0
0641: 	ld l, a
0642: 	bit 7, [hl]
0644: 	jr nz, Object_Update_GemCommon.unloadGem
0646: 	inc l
0647: 	ret

0D31: 	pop hl
Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue

Object_Update.continue:
0D32: 	inc l
0D33: 	ld h, $C1
0D35: 	jr Object_Update.objectUpdateLoop

Object_Update.objectUpdateLoop:
0D1F: 	ld a, [hl]
0D20: 	inc a
0D21: 	jr z, Object_Update.continue
0D23: 	dec a
0D24: 	ret z

04CF: 	call FillShadowOAM

FillShadowOAM:
05D5: 	ld hl, Object_Types
05D8: 	ld de, sprites_bullets
05DB: 	ld b, $26
FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
==== Interrupt Taken ====

_LABEL_48_:
0048: 	jp LYChandler

LYChandler:
0EE1: 	push af
0EE2: 	push bc
0EE3: 	ldh a, [rLYC]
0EE5: 	cp $08
0EE7: 	jr z, LYChandler.line8disableWindow

LYChandler.line8disableWindow:
0EFB: 	push hl
0EFC: 	ld hl,  $FF00 | rSTAT
LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2

LYChandler.waitForMode_u2:
0EFF: 	bit 1, [hl]
0F01: 	jr nz, LYChandler.waitForMode_u2
0F03: 	pop hl
0F04: 	ldh a, [rLCDC]
0F06: 	or $02
0F08: 	and $EF
0F0A: 	ldh [rLCDC], a
0F0C: 	ld a, $A8
0F0E: 	ldh [rWX], a
0F10: 	ldh a, [hCurrentState]
0F12: 	cp $04
0F14: 	jr nz, LYChandler.endIf

LYChandler.endIf:
0F20: 	ld a, $90
0F22: 	ldh [rLYC], a
0F24: 	pop bc
0F25: 	pop af
0F26: 	reti
==== Interrupt Exited ====

0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop
05E5: 	push hl
05E6: 	add a
05E7: 	ld l, a
05E8: 	ld h, $06
05EA: 	ldi a, [hl]
05EB: 	ld h, [hl]
05EC: 	ld l, a
05ED: 	call RunSubroutine

RunSubroutine:
0747: 	jp hl

Object_Draw_PurpleGem:
1129: 	push hl
112A: 	push bc
112B: 	call PrepareSpriteDraw

PrepareSpriteDraw:
0DA4: 	swap c
0DA6: 	ld a, c
0DA7: 	and $0F
0DA9: 	or $D0
0DAB: 	ld h, a
0DAC: 	ld a, c
0DAD: 	and $F0
0DAF: 	ld l, a
0DB0: 	bit 7, [hl]
0DB2: 	ret nz
0DB3: 	inc l
0DB4: 	push de
0DB5: 	ld a, [wPlayerPos.x_high]
0DB8: 	and $0F
0DBA: 	ld c, a
0DBB: 	ld a, [TextBufferEnd]
0DBE: 	and $F0
0DC0: 	add c
0DC1: 	swap a
0DC3: 	ld c, a
0DC4: 	ldi a, [hl]
0DC5: 	and $F0
0DC7: 	ld d, a
0DC8: 	ldi a, [hl]
0DC9: 	and $0F
0DCB: 	or d
0DCC: 	swap a
0DCE: 	sub c
0DCF: 	ld c, a
0DD0: 	ld a, [wPlayerPos.y_metatile]
0DD3: 	dec a
0DD4: 	and $0F
0DD6: 	ld b, a
0DD7: 	ld a, [wPlayerPos.y_subpixel]
0DDA: 	and $F0
0DDC: 	add b
0DDD: 	swap a
0DDF: 	ld b, a
0DE0: 	ldi a, [hl]
0DE1: 	and $F0
0DE3: 	ld d, a
0DE4: 	ldi a, [hl]
0DE5: 	and $0F
0DE7: 	or d
0DE8: 	swap a
0DEA: 	sub b
0DEB: 	ld b, a
0DEC: 	pop de
0DED: 	ret

112E: 	ld hl, SprPurpleGem
1131: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

1134: 	ld a, c
1135: 	add $08
1137: 	ld c, a
1138: 	call Object_DrawSingle

Object_DrawSingle:
0EC7: 	ld a, b
0EC8: 	ld [de], a
0EC9: 	inc e
0ECA: 	ld a, c
0ECB: 	ld [de], a
0ECC: 	inc e
0ECD: 	ldi a, [hl]
0ECE: 	ld [de], a
0ECF: 	inc e
0ED0: 	ldi a, [hl]
0ED1: 	ld [de], a
0ED2: 	inc e
0ED3: 	ret

113B: 	pop bc
113C: 	pop hl
113D: 	dec b
113E: 	ret

05F0: 	pop hl
05F1: 	inc b
05F2: 	dec b
05F3: 	jr nz, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop

FillShadowOAM.fillLoop:
05DD: 	ld c, l
05DE: 	ldi a, [hl]
05DF: 	inc a
05E0: 	jr z, FillShadowOAM.fillLoop
05E2: 	dec a
05E3: 	jr z, FillShadowOAM.endLoop

FillShadowOAM.endLoop:
05F5: 	xor a
FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop

FillShadowOAM.zeroTheRestLoop:
05F6: 	ld [de], a
05F7: 	inc e
05F8: 	jr nz, FillShadowOAM.zeroTheRestLoop
05FA: 	ret

04D2: 	ld c, $08
StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z
0D50: 	dec a
0D51: 	jr nz, Object_CheckOnScreen.otherwise

Object_CheckOnScreen.otherwise:
0D5A: 	inc l
0D5B: 	ld a, [wPlayerPos.x_high]
0D5E: 	ld b, a
0D5F: 	inc l
0D60: 	ldi a, [hl]
0D61: 	sub b
0D62: 	cp $0C
0D64: 	jr nc, Object_CheckOnScreen.offScreen
0D66: 	cp $F7
0D68: 	jr nc, Object_CheckOnScreen.offScreen
0D6A: 	ld a, [wPlayerPos.y_metatile]
0D6D: 	ld b, a
0D6E: 	inc l
0D6F: 	ldi a, [hl]
0D70: 	sub b
0D71: 	cp $0A
0D73: 	jr nc, Object_CheckOnScreen.offScreen
0D75: 	cp $F7
0D77: 	jr nc, Object_CheckOnScreen.offScreen
0D79: 	ld a, l
0D7A: 	and $F0
0D7C: 	ld l, a
0D7D: 	res 7, [hl]
0D7F: 	ret

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop

StateUpdate_GameLoop.checkLoop:
04D4: 	call Object_CheckOnScreen

Object_CheckOnScreen:
0D38: 	ld hl, wCurrCheckOnScreenObj
0D3B: 	ld b, [hl]
0D3C: 	inc [hl]
0D3D: 	ld d, $C1
0D3F: 	ld e, b
0D40: 	swap b
0D42: 	ld h, $D0
0D44: 	ld a, b
0D45: 	and $0F
0D47: 	or h
0D48: 	ld h, a
0D49: 	ld a, b
0D4A: 	and $F0
0D4C: 	ld l, a
0D4D: 	ld a, [de]
0D4E: 	inc a
0D4F: 	ret z

04D7: 	dec c
04D8: 	jr nz, StateUpdate_GameLoop.checkLoop
04DA: 	call HandleOneTileStrip

HandleOneTileStrip:
0CC6: 	ld hl, wBooleans
0CC9: 	bit 1, [hl]
0CCB: 	jr nz, HandleOneTileStrip.loadRight
0CCD: 	bit 2, [hl]
0CCF: 	jr nz, HandleOneTileStrip.loadUp
0CD1: 	bit 3, [hl]
0CD3: 	jr nz, HandleOneTileStrip.loadLeft

HandleOneTileStrip.loadLeft:
0CEA: 	res 3, [hl]
0CEC: 	ld bc, $00FF
0CEF: 	jp m_MapHandler_LoadStripY

m_MapHandler_LoadStripY:
0C58: 	ld d, b
0C59: 	ld e, c
0C5A: 	call MapHandler_GetPointers

MapHandler_GetPointers:
0BA0: 	ld a, [wPlayerPos.x_high]
0BA3: 	add d
0BA4: 	ld b, a
0BA5: 	ld [hRegStorage1], a
0BA8: 	ld a, [wPlayerPos.y_metatile]
0BAB: 	add e
0BAC: 	ld c, a
0BAD: 	ld [hRegStorage2], a
0BB0: 	call MapHandler_GetMapDataPointer

MapHandler_GetMapDataPointer:
0892: 	push bc
0893: 	ldh a, [hMapWidth]
0895: 	ld b, a
0896: 	call Mul8x8to16

Mul8x8to16:
1035: 	ld d, $02
1037: 	ld h, $00
1039: 	ld a, b
103A: 	swap a
103C: 	and $0F
103E: 	ld e, a
103F: 	ld a, c
1040: 	and $0F
1042: 	swap a
1044: 	or e
1045: 	ld e, a
1046: 	ld a, [de]
1047: 	ld l, a
1048: 	ld a, b
1049: 	and $0F
104B: 	ld e, a
104C: 	ld a, c
104D: 	and $F0
104F: 	or e
1050: 	ld e, a
1051: 	ld a, [de]
1052: 	add l
1053: 	ld l, a
1054: 	adc h
1055: 	sub l
1056: 	ld h, a
1057: 	add hl, hl
1058: 	add hl, hl
1059: 	add hl, hl
105A: 	add hl, hl
105B: 	ld a, b
105C: 	and $0F
105E: 	ld e, a
105F: 	ld a, c
1060: 	and $0F
1062: 	swap a
1064: 	or e
1065: 	ld e, a
1066: 	ld a, [de]
1067: 	add l
1068: 	ld l, a
1069: 	adc h
106A: 	sub l
106B: 	ld h, a
106C: 	ld a, b
106D: 	swap a
106F: 	and $0F
1071: 	ld e, a
1072: 	ld a, c
1073: 	and $F0
1075: 	or e
1076: 	ld e, a
1077: 	ld a, [de]
1078: 	add h
1079: 	ld h, a
107A: 	ret

0899: 	pop bc
089A: 	ld a, l
089B: 	add b
089C: 	ld e, a
089D: 	adc h
089E: 	sub e
089F: 	or $40
08A1: 	ld d, a
08A2: 	ret

0BB3: 	sla b
0BB5: 	sla c
0BB7: 	ld a, c
0BB8: 	add a
0BB9: 	add a
0BBA: 	add a
0BBB: 	ld l, a
0BBC: 	ld h, $26
0BBE: 	add hl, hl
0BBF: 	add hl, hl
0BC0: 	ld a, b
0BC1: 	and $1F
0BC3: 	or l
0BC4: 	ld l, a
0BC5: 	ret

0C5D: 	ld b, $0B
m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject

m_MapHandler_LoadStripY.noObject:
0C71: 	add a
0C72: 	add a
0C73: 	call HandleGBCpalettes

HandleGBCpalettes:
0BC6: 	ld c, a
0BC7: 	ld a, [hGameboyType]
0BCA: 	cp $11
0BCC: 	jr nz, HandleGBCpalettes.nopalettes

HandleGBCpalettes.nopalettes:
0BF6: 	ld a, c
0BF7: 	ret

0C76: 	ld c, a
0C77: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C78: 	ld a, c
0C79: 	ldi [hl], a
0C7A: 	inc a
0C7B: 	ldi [hl], a
0C7C: 	inc a
0C7D: 	ld c, a
0C7E: 	ld a, l
0C7F: 	add $1E
0C81: 	ld l, a
0C82: 	rst $00

waitHBlank:
0000: 	ldh a, [rSTAT]
0002: 	and $02
0004: 	jr nz, waitHBlank.wait
0006: 	ret

0C83: 	ld a, c
0C84: 	ldi [hl], a
0C85: 	inc a
0C86: 	ldi [hl], a
0C87: 	ld a, l
0C88: 	add $1E
0C8A: 	ld l, a
0C8B: 	adc h
0C8C: 	sub l
0C8D: 	ld h, a
0C8E: 	res 2, h
0C90: 	ld a, [hMapWidth]
0C93: 	add e
0C94: 	ld e, a
0C95: 	adc d
0C96: 	sub e
0C97: 	ld d, a
0C98: 	ld a, [hRegStorage2]
0C9B: 	inc a
0C9C: 	ld [hRegStorage2], a
0C9F: 	dec b
0CA0: 	jr nz, m_MapHandler_LoadStripY.copyLoop

m_MapHandler_LoadStripY.copyLoop:
0C5F: 	ld a, [hMapLoaded]
0C62: 	ld [$2000], a
0C65: 	ld a, [de]
0C66: 	cp $40
0C68: 	jr c, m_MapHandler_LoadStripY.noObject
0C6A: 	sub $40
0C6C: 	call HandleObjectTile

HandleObjectTile:
0BF8: 	push hl
0BF9: 	push bc
0BFA: 	push de
0BFB: 	ld l, a
0BFC: 	ld [hRegStorage3], a
0BFF: 	call GetCollectableFlag

GetCollectableFlag:
07E9: 	push hl
07EA: 	ld b, a
07EB: 	ld hl, Object_Flags
07EE: 	rra
07EF: 	rra
07F0: 	rra
07F1: 	and $1F
07F3: 	add l
07F4: 	ld l, a
07F5: 	ld a, b
07F6: 	and $07
07F8: 	inc a
07F9: 	ld b, a
07FA: 	xor a
07FB: 	scf
GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop

GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop

GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop

GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop

GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop

GetCollectableFlag.loop:
07FC: 	rra
07FD: 	dec b
07FE: 	jr nz, GetCollectableFlag.loop
0800: 	and [hl]
0801: 	pop hl
0802: 	ret

0C02: 	jr nz, HandleObjectTile.end
0C04: 	ld a, [hMapLoaded]
0C07: 	ld [$2000], a
0C0A: 	ld h, $7F
0C0C: 	ld b, [hl]
0C0D: 	call Object_SpawnObject
0CFA: Line Breakpoint hit
